/* 
 * Pair submission
 * Steven Friedman 
 * Brandon Meeks 
 *
 */

package lab3.autogen;
import lab3.*;
import java_cup.runtime.*;

import java.util.Vector;
import java.util.Enumeration;

// $Id: jmm.cup 33 2010-08-09 21:47:19Z cytron $

/*
 * Java minus minus grammar
 *
 */

/*
 * This is a standard Java grammar, modified for our use.  Many features
 * are noted as "extra credit".  You must negotiate
 * the extra credit with the professor.
 *
 * Some features are added too: look for comments to that effect.
 * RC
 */

action code {:

   /**  Code that is included with the action blocks
     *
     */

   /* Need some classes that extend AbstractNode? Here's an example */
   /* The TemporaryNode is just a place holder, and is good for development but
    * should eventually go away.
    */

   class Example extends AbstractNode {
      public String getName() { return "Example"; }
   }

   class TemporaryNode extends AbstractNode {

     private String s;

     public TemporaryNode(String s) {
       this.s = s;
     }

     public String getName() { return s; }

   }

   class IntegerNode extends AbstractNode {
      private Integer val;
      public IntegerNode(Integer val) { this.val = val; }
      public String getName() { return "Integer " + val; }
   }

   class QualifiedNameNodeSegment extends AbstractNode {
      String name;

      QualifiedNameNodeSegment(String s){
      	name = s;
      }

      public String getName(){
      	return name;
      }

   }

   class FieldVariableDeclarationNode extends AbstractNode {
      public String mods;

      public FieldVariableDeclarationNode(String m) {
      	mods = m;
      }

      public String getName() {
      	return mods;
      }
   }


   //fields, statics, constructors, methods, inner classes


   class FieldVariableDeclaratorNode extends AbstractNode {
   		public String name;

   		public FieldVariableDeclaratorNode(String s) {
   			name = s;
   		}

   		public String getName(){
   			return getParent().getName() + " " + name;
   		}

   }

   class FieldsNode extends AbstractNode{
   		public String name;
   		public FieldsNode(String s){
   			name = s;
   		}

   		public String getName(){
   			return name;
   		}
   }

   class StaticsNode extends AbstractNode{
   		public String name;
   		public StaticsNode(String s){
            name = s;
   		}

        public String getName() {
            return name;
        }
   }

   class ConstructorsNode extends AbstractNode{
        public String name;
   		public ConstructorsNode(String s){
            name = s;
   		}

        public String getName() {
            return name;
        }
   }

   class MethodsNode extends AbstractNode{
        public String name;
   		public MethodsNode(String s){
            name = s;
   		}

        public String getName() {
            return name;
        }
   }

   class InnerClassesNode extends AbstractNode{
        public String name;
   		public InnerClassesNode(String s){
            name = s;
   		}

        public String getName() {
            return name;
        }
   }

   /*  Factory methods to make nodes
    *   Add ones here that make it easy for you.
        The ones given here are temporary placeholders
    */

   public AbstractNode makeNode(Symbol s) { return new TemporaryNode(symString.symToString[s.sym]); }
   public AbstractNode makeNode(String s) { return new TemporaryNode(s);   }
   public AbstractNode makeNode(Integer i) { return new IntegerNode(i);   }
   public QualifiedNameNodeSegment makeQualfiedNameNodeSegment(String s) {return new QualifiedNameNodeSegment(s); }


:};

/*
 * Almost all of these can just be Symbol types, used for parsing.  Occasionally,
 * a terminal has semantic information of use, as was the case for number in hw2.
 * In those cases, declare the Symbol appropriately but you'll have to modify the
 * Scanner to RESULT = the right type.  I've done this for integer and string types below
 */

terminal  Symbol   OP_GE, OP_LE, OP_EQ, OP_NE, OP_GT, OP_LT;
terminal  Symbol   OP_LAND, OP_LOR;
terminal  Symbol   INSTANCEOF;
terminal  Symbol   HAT, TILDE;
terminal  Symbol   BOOLEAN;
terminal  Symbol   CLASS;
terminal  Symbol   ELSE;
terminal  Symbol   IF, INT;
terminal  Symbol   NEW, NULL;
terminal  Symbol   PRIVATE, PUBLIC;
terminal  Symbol   RETURN;
terminal  Symbol   STATIC, SUPER;
terminal  Symbol   THIS;
terminal  Symbol   VOID;
terminal  Symbol   WHILE;
terminal  Symbol   ASS_ADD;
terminal  Symbol   LPAREN, RPAREN, LBRACE, RBRACE, EQUALS;
terminal  Symbol   PERIOD, COLON, SEMICOLON, COMMA, PIPE, AND, ASTERICK;
terminal  Symbol   PLUSOP, MINUSOP, RSLASH, PERCENT, QUESTION;
terminal  Symbol   BANG;

terminal  String   IDENTIFIER, LITERAL;
terminal  Integer  INTNUMBER;


/* To save you typing, I've made all these AbstracNode types.  You will want
 * to customize them as you go.
 */

non terminal   AbstractNode     CompilationUnit;
non terminal   AbstractNode     FieldVariableDeclaration;
non terminal   AbstractNode     MethodDeclaration;
non terminal   AbstractNode     MethodDeclarator;
non terminal   AbstractNode     ParameterList,  Parameter;
non terminal   AbstractNode     MethodBody, ConstructorDeclaration;
non terminal   AbstractNode     StaticInitializer;
non terminal   AbstractNode     Block;
non terminal   AbstractNode     LocalVariableDeclarationsAndStatements;
non terminal   AbstractNode     LocalVariableDeclarationOrStatement;
non terminal   AbstractNode     LocalVariableDeclarationStatement ;
non terminal   AbstractNode     Statement, EmptyStatement;
non terminal   AbstractNode     MatchedStatement, UnMatchedStatement;
non terminal   AbstractNode     ExpressionStatement;
non terminal   AbstractNode     MatchedSelectionStatement, UnMatchedSelectionStatement;
non terminal   AbstractNode     MatchedIterationStatement, UnMatchedIterationStatement;
non terminal   AbstractNode     PrimaryExpression;
non terminal   AbstractNode     NotJustName, ComplexPrimary, ComplexPrimaryNoParenthesis;
non terminal   AbstractNode     FieldAccess, MethodCall, MethodReference;
non terminal   AbstractNode     SpecialName, ArgumentList, AllocationExpression;
non terminal   AbstractNode     PostfixExpression;
non terminal   AbstractNode     UnaryExpression, LogicalUnaryExpression;
non terminal   AbstractNode     LogicalUnaryOperator, ArithmeticUnaryOperator;
non terminal   AbstractNode     CastExpression, MultiplicativeExpression;
non terminal   AbstractNode     AdditiveExpression, ShiftExpression, RelationalExpression;
non terminal   AbstractNode     EqualityExpression, AndExpression, ExclusiveOrExpression;
non terminal   AbstractNode     InclusiveOrExpression, ConditionalAndExpression;
non terminal   AbstractNode     ConditionalOrExpression;
non terminal   AbstractNode     ConditionalExpression, AssignmentExpression;
non terminal   AbstractNode     AssignmentOperator;
non terminal   AbstractNode     Expression;
non terminal   AbstractNode     ReturnStatement;

non terminal   AbstractNode     Identifier;
non terminal   AbstractNode     Literal;
non terminal   AbstractNode     Number;
non terminal   AbstractNode     DeclaratorName;
non terminal   AbstractNode     FieldVariableDeclaratorName;
non terminal   AbstractNode     MethodDeclaratorName;
non terminal   AbstractNode     LocalVariableDeclaratorName;
non terminal   AbstractNode     TypeDeclarations;
non terminal   AbstractNode     TypeDeclaration;
non terminal   AbstractNode     ClassDeclaration;
non terminal   AbstractNode     ClassBody;
non terminal   AbstractNode     Modifiers;
non terminal   AbstractNode     FieldDeclarations;
non terminal   AbstractNode     FieldDeclaration;
non terminal   AbstractNode     FieldVariableDeclarators;
non terminal   AbstractNode     LocalVariableDeclarators;
non terminal   AbstractNode     QualifiedName;
non terminal   AbstractNode     TypeName, TypeSpecifier;
non terminal   AbstractNode     PrimitiveType;

start with CompilationUnit;


CompilationUnit
        ::=	TypeDeclarations:td
		{:
			AbstractNode prog = makeNode("Program").adoptChildren(td);

			System.out.println("\nAST\n");
			prog.walkTree(new PrintTree(System.out));
		:}
        ;

/*
 * Simple node magic to link nodes together as siblings.  Covered
 * in class -- you have to be aware of how the list is growing
 * These children will be adopted by CompilationUnit rule above.
 */

TypeDeclarations
        ::= TypeDeclaration:td
		{: RESULT = td; :}
        |   TypeDeclarations:tds  TypeDeclaration:td
		{: RESULT = tds.makeSibling(td);  :}
        ;

/*
 * Extra credit:  interfaces, but classes are all we'll deal with by default
 */
TypeDeclaration
        ::= ClassDeclaration:rhs
		{: RESULT = rhs; :}
        ;


ClassDeclaration
        ::= Modifiers:mods CLASS:cl Identifier:id ClassBody:clb
        {:
        	String modString = "";
        	AbstractNode modNode = mods;
        	while (modNode != null) {
        		modString += modNode.getName();
        		modString += " ";
        		modNode = modNode.getSib();
        	}
        	RESULT = makeNode(modString + " class " + id.getName()).adoptChildren(clb);
        :}
		;

/*
 * Process bottom-up to figure out whether the Modifiee
 * is   static or not
 * is   public or not
 * A pair of booleans, like IntPair could be used, or IntPair could be used
 * if you know what I mean.
 */
Modifiers
	::= PUBLIC
		{: RESULT = makeNode("public"); :}
	|   PRIVATE
		{: RESULT = makeNode("private"); :}
	|   STATIC
		{: RESULT = makeNode("static"); :}
	|   Modifiers:mds PUBLIC
		{:  RESULT = makeNode("public").makeSibling(mds); :}
	|   Modifiers:mds PRIVATE
		{:  RESULT = makeNode("private").makeSibling(mds); :}
	|   Modifiers:mds STATIC
		{:  RESULT = makeNode("static").makeSibling(mds); :}
	;


/*
 * Extra credit:  other types
 */
PrimitiveType
        ::=	BOOLEAN:tok
        	{: RESULT = makeNode(tok); :}
        | 	INT:tok
        	{: RESULT = makeNode(tok); :}
        | 	VOID:tok
        	{: RESULT = makeNode(tok); :}
        ;

/*
 * You need a nice structure to represent this list of identifiers.
 * You might consider java.util.Vector
 */
QualifiedName
        ::= Identifier:id
        	{: RESULT = makeQualfiedNameNodeSegment(id.getName()); :}
        |   QualifiedName:qn PERIOD Identifier:id
        	{: RESULT = qn.makeSibling(makeQualfiedNameNodeSegment(id.getName())); :}
        ;

/*
 * In a given program, FieldDeclarations can occur in any order.
 * But we would like them grouped together.
 * So, structure your AST so that the items coming back from
 * FieldDeclarations are grouped by:
 *
 *   fields, statics, constructors, methods, inner classes
 *
 * (run the class solution if confused)
 */
ClassBody
	::= LBRACE FieldDeclarations:fds RBRACE
		{:
			AbstractNode classBody = makeNode("Class Body: ");
			AbstractNode fieldsHeader = makeNode("FIELDS");
			AbstractNode staticsHeader = makeNode("STATICS");
			AbstractNode constructorsHeader = makeNode("CONSTRUCTORS");
			AbstractNode methodsHeader = makeNode("METHODS");
			AbstractNode innerClassesHeader = makeNode("INNER CLASSES");

			AbstractNode iter = fds.getFirst();
			while(iter != null){
				AbstractNode next = iter.getSib();
				iter.orphan();
				String type = iter.whatAmI();
				switch(type){
					case "FieldsNode[NodeDumpable]":
						fieldsHeader.adoptChildren(iter);
						break;
					case "StaticsNode[NodeDumpable]":
						staticsHeader.adoptChildren(iter);
						break;
					case "ConstructorsNode[NodeDumpable]":
						constructorsHeader.adoptChildren(iter);
						break;
					case "MethodsNode[NodeDumpable]":
						methodsHeader.adoptChildren(iter);
						break;
					case "InnerClassesNode[NodeDumpable]":
						innerClassesHeader.adoptChildren(iter);
						break;
				}
				iter = next;
			}

			RESULT = classBody.adoptChildren(
				fieldsHeader
				.makeSibling(staticsHeader)
				.makeSibling(constructorsHeader)
				.makeSibling(methodsHeader)
				.makeSibling(innerClassesHeader)
			);
		:}
	|   LBRACE RBRACE
		{: RESULT = makeNode("Empty Class"); :}
	;

FieldDeclarations
	::= FieldDeclaration:fd
		{: RESULT = fd; :}
    |   FieldDeclarations:fds FieldDeclaration:fd
    	{: RESULT = fds.makeSibling(fd); :}
    ;

FieldDeclaration
	::= FieldVariableDeclaration:fvd SEMICOLON
		{: RESULT = fvd; :}
	|   MethodDeclaration:rhs
		{: RESULT = rhs; :}
	|   ConstructorDeclaration:rhs
		{: RESULT = rhs; :}
	|   StaticInitializer:rhs
		{: RESULT = rhs; :}
	|   ClassDeclaration                     /* Inner classes */
		{: RESULT = new InnerClassesNode("Inner"); :}
	;

/*
 * This isn't structured so nicely for a bottom up parse.  Recall
 * the example I did in class for Digits, where the "type" of the digits
 * (i.e., the base) is sitting off to the side.  You'll have to do something
 * here to get the information where you want it, so that the declarations can
 * be suitably annotated with their type and modifier information.
 */
FieldVariableDeclaration
	::= Modifiers:m TypeSpecifier:t FieldVariableDeclarators:fvds
		{:
			/* first make modifier string to attach to each fd */
			String modString = "";
        	AbstractNode modNode = m.getFirst();
        	while (modNode != null) {
        		modString += modNode.getName();
        		modString += " ";
        		modNode = modNode.getSib();
        	}

        	if (t.getClass().equals(QualifiedNameNodeSegment.class)){
        		/* print out each segment of the qualified name*/
        		String nameString = "";
	        	AbstractNode qualifiedSeg = t.getFirst();
	        	while (qualifiedSeg != null) {
	        		nameString += qualifiedSeg;
	        		nameString += ".";
	        		qualifiedSeg = qualifiedSeg.getSib();
	        	}

	        	modString += nameString;
	        	modString = modString.substring(0, modString.length()-1) + " ";
        	}
        	else{
        		modString += t.getName() + " ";
        	}

        	RESULT = new FieldsNode(modString).adoptChildren(fvds);
		:}
	;

TypeSpecifier
        ::= TypeName:rhs
        	{: RESULT = rhs; :}
        ;

TypeName
	::= PrimitiveType:rhs
		{: RESULT = rhs; :}
	|   QualifiedName:rhs
		{: RESULT = rhs; :}
	;

FieldVariableDeclarators
	::=  FieldVariableDeclaratorName:v
		 {:  RESULT = new FieldVariableDeclaratorNode(v.getName()); :}
	|    FieldVariableDeclarators:fds COMMA FieldVariableDeclaratorName:v
		 {: RESULT = fds.makeSibling(new FieldVariableDeclaratorNode(v.getName())); :}
	;

/*
 * We require modifiers, extra credit for package stuff
 */
MethodDeclaration
	::= Modifiers:m TypeSpecifier:t MethodDeclarator:md     MethodBody:rhs
	{:
		/* first make modifier string to the md */
		String modString = "";
    	AbstractNode modNode = m.getFirst();
    	while (modNode != null) {
    		modString += modNode.getName();
    		modString += " ";
    		modNode = modNode.getSib();
    	}

    	/* handle type specifier */
    	if (t.getClass().equals(QualifiedNameNodeSegment.class)){
    		/* print out each segment of the qualified name*/
    		String nameString = "";
        	AbstractNode qualifiedSeg = t.getFirst();
        	while (qualifiedSeg != null) {
        		nameString += qualifiedSeg;
        		nameString += ".";
        		qualifiedSeg = qualifiedSeg.getSib();
        	}

        	modString += nameString;
        	modString = modString.substring(0, modString.length()-1) + " ";
        }
        else{
        	modString += t.getName() + " ";
        }

    	MethodsNode methodNode = new MethodsNode(modString);
    	md.adoptChildren(makeNode("BODY").adoptChildren(rhs));
    	methodNode.adoptChildren(md);
    	RESULT = methodNode;

	:}
	;

MethodDeclarator
	::= MethodDeclaratorName:dn LPAREN ParameterList:pl RPAREN
		{: 	AbstractNode paramsNode = makeNode("PARAMS");
			paramsNode.adoptChildren(pl);
			RESULT = makeNode(dn.getName()).
					adoptChildren(paramsNode);
		:}
	|   MethodDeclaratorName:dn LPAREN RPAREN
		{: RESULT = makeNode(dn.getName()); :}
	;

ParameterList
	::= Parameter:rhs
		{: RESULT = rhs; :}
	|   ParameterList:spine COMMA Parameter:rhs
		{: RESULT = spine.makeSibling(rhs); :}
	;

Parameter
	::= TypeSpecifier:t DeclaratorName:dn
		{:
			/* handle type specifier */
			String modString = "";
	    	if (t.getClass().equals(QualifiedNameNodeSegment.class)){
	    		/* print out each segment of the qualified name*/
	    		String nameString = "";
	        	AbstractNode qualifiedSeg = t.getFirst();
	        	while (qualifiedSeg != null) {
	        		nameString += qualifiedSeg;
	        		nameString += ".";
	        		qualifiedSeg = qualifiedSeg.getSib();
	        	}

	        	modString += nameString;
	        	modString = modString.substring(0, modString.length()-1) + " ";
	        }
	        else{
	        	modString += t.getName() + " ";
	        }

	        RESULT = makeNode(modString + " " +  dn.getName());
		:}

	;

DeclaratorName
	::= Identifier:in
	{: RESULT = in; :}
    ;

MethodDeclaratorName
	::= Identifier:in
	{: RESULT = in; :}
    ;

FieldVariableDeclaratorName
	::= Identifier:in
		{: RESULT = in; :}
    ;

LocalVariableDeclaratorName
	::= Identifier:in
	{: RESULT = in; :}
    ;

MethodBody
	::= Block:rhs
	{: RESULT = rhs; :}
	;

ConstructorDeclaration
	::= Modifiers:m MethodDeclarator:md        Block:rhs
	{:
		/* first make modifier string to the md */
		String modString = "";
    	AbstractNode modNode = m.getFirst();
    	while (modNode != null) {
    		modString += modNode.getName();
    		modString += " ";
    		modNode = modNode.getSib();
    	}


    	ConstructorsNode constructorNode = new ConstructorsNode(modString);
    	md.adoptChildren(makeNode("BODY").adoptChildren(rhs));
    	constructorNode.adoptChildren(md);
    	RESULT = constructorNode;

	:}
	;

StaticInitializer
	::= STATIC Block:rhs
		{:
			 StaticsNode sn = new StaticsNode("BLOCK");
			 sn.adoptChildren(rhs);
			 RESULT = sn;
		:}
	;

/*
 * These can't be reorganized, because the order matters.
 * For example:  int i;  i = 5;  int j = i;
 */
Block
	::= LBRACE LocalVariableDeclarationsAndStatements:stmts RBRACE
		{: RESULT = stmts; :}
	|   LBRACE RBRACE
		{: RESULT = makeNode("EMPTY"); :}
    ;

LocalVariableDeclarationsAndStatements
	::= LocalVariableDeclarationOrStatement:rhs
		{: RESULT = rhs; :}
	|   LocalVariableDeclarationsAndStatements:lvds LocalVariableDeclarationOrStatement:rhs
	    {: RESULT = lvds.makeSibling(rhs); :}
	;

LocalVariableDeclarationOrStatement
	::= LocalVariableDeclarationStatement:rhs
		{: 	RESULT = rhs; :}
	|   Statement:rhs
		{: RESULT = rhs; :}
	;

LocalVariableDeclarationStatement
	::= TypeSpecifier:t LocalVariableDeclarators:rhs SEMICOLON
		{:
			/* handle type specifier */
			String modString = "";
	    	if (t.getClass().equals(QualifiedNameNodeSegment.class)){
	    		/* print out each segment of the qualified name*/
	    		String nameString = "";
	        	AbstractNode qualifiedSeg = t.getFirst();
	        	while (qualifiedSeg != null) {
	        		nameString += qualifiedSeg;
	        		nameString += ".";
	        		qualifiedSeg = qualifiedSeg.getSib();
	        	}

	        	modString += nameString;
	        	modString = modString.substring(0, modString.length()-1) + " ";
	        }
	        else{
	        	modString += t.getName() + " ";
	        }
			RESULT = makeNode("LOCAL " + modString).adoptChildren(rhs);
		:}
	|   ClassDeclaration                     /* Inner classes */
		{: RESULT = makeNode("Inner Class"); :}
	;

LocalVariableDeclarators
	::= LocalVariableDeclaratorName:v
		{: RESULT = v; :}
	|   LocalVariableDeclarators:fds COMMA LocalVariableDeclaratorName:v
		{: RESULT = fds.makeSibling(v); :}
	;

Statement
	::= MatchedStatement:ms
		{: RESULT = ms; :}
	|   UnMatchedStatement:us
		{: RESULT = us; :}
	;

UnMatchedStatement
	::=  UnMatchedSelectionStatement:uss
		 {: RESULT = uss; :}
	|    UnMatchedIterationStatement:uis
		 {: RESULT = makeNode("Unmatched Iteration"); :}
	;

MatchedStatement
	::= EmptyStatement:es
		{: RESULT = es; :}
	|   ExpressionStatement:rhs SEMICOLON
		{: RESULT = rhs; :}
    |   MatchedSelectionStatement:mss
    	{: RESULT = mss; :}
    |   MatchedIterationStatement:mis
    	{: RESULT = mis; :}
	|   ReturnStatement:rs
		{: RESULT = rs; :}
	|   Block:rhs
		{: RESULT = makeNode("BLOCK").adoptChildren(rhs); :}
	;

EmptyStatement
	::= SEMICOLON
	{: RESULT = makeNode("Empty Statement"); :}
    ;

ExpressionStatement
	::= Expression:rhs
		{: RESULT = rhs; :}
	;

/*
 *  You will eventually have to address the shift/reduce error that
 *     occurs when the second IF-rule is uncommented.
 *
 */

MatchedSelectionStatement
	::= IF LPAREN Expression:e RPAREN MatchedStatement:ms ELSE MatchedStatement:ems
		{:
			AbstractNode ifNode = makeNode("IF");
			ifNode.adoptChildren(e);

			AbstractNode thenNode = makeNode("THEN");
			thenNode.adoptChildren(ms);

			AbstractNode elseNode = makeNode("ELSE");
			elseNode.adoptChildren(ems);

			ifNode.makeSibling(thenNode).makeSibling(elseNode);

			RESULT = ifNode;
		:}
	;

UnMatchedSelectionStatement
	::= IF LPAREN Expression:e RPAREN MatchedStatement:ms ELSE UnMatchedStatement:um
		{:
			AbstractNode ifNode = makeNode("IF");
			ifNode.adoptChildren(e);

			AbstractNode thenNode = makeNode("THEN");
			thenNode.adoptChildren(ms);

			AbstractNode elseNode = makeNode("ELSE");
			elseNode.adoptChildren(um);

			ifNode.makeSibling(thenNode).makeSibling(elseNode);

			RESULT = ifNode;
		:}
	|   IF LPAREN Expression:e RPAREN Statement:s
		{:
			AbstractNode ifNode = makeNode("IF");
			ifNode.adoptChildren(e);

			AbstractNode thenNode = makeNode("THEN");
			thenNode.adoptChildren(s);

			ifNode.makeSibling(thenNode);

			RESULT = ifNode;

		:}
	;

/*
 * Extra Credit:  FOR statement, DO statement
 */
MatchedIterationStatement
	::= WHILE LPAREN Expression:e RPAREN MatchedStatement:ms
	{:
		AbstractNode whileNode = makeNode("WHILE");
		whileNode.adoptChildren(e);

		AbstractNode doNode = makeNode("DO");
		doNode.adoptChildren(ms);

		whileNode.makeSibling(doNode);

		RESULT = whileNode;

	:}
	;

UnMatchedIterationStatement
	::= WHILE LPAREN Expression:e RPAREN UnMatchedStatement:us
		{:
			AbstractNode whileNode = makeNode("WHILE");
			whileNode.adoptChildren(e);

			AbstractNode doNode = makeNode("DO");
			doNode.adoptChildren(us);

			whileNode.makeSibling(doNode);

			RESULT = whileNode;
		:}
	;

ReturnStatement
	::= RETURN Expression:e SEMICOLON
		{: RESULT = makeNode("RETURN").adoptChildren(e); :}
	|   RETURN SEMICOLON
		{: RESULT = makeNode("VOID RETURN"); :}
	;

PrimaryExpression
	::= QualifiedName:t
		{: RESULT = t; :}
	|   NotJustName:rhs
		{: RESULT = rhs; :}
/*
 *  You will eventually have to explain the conflicts that arise when the rule below
 *       is uncommented.
 *  This rule lets a block ( { .... }  ) serve anywhere a primary expression could.
 *  So you could write  a = { while (h>5) h = h -k; };
 *
 *	|   Block:rhs
 */
	;

NotJustName
	::= SpecialName:sn
		{: RESULT = sn; :}
	|   AllocationExpression:ae
		{: RESULT = ae; :}
	|   ComplexPrimary:rhs
		{: RESULT = rhs; :}

	;

ComplexPrimary
	::= LPAREN Expression:rhs RPAREN
		{: RESULT = rhs; :}
	|   ComplexPrimaryNoParenthesis:rhs
		{: RESULT = rhs; :}
	;

ComplexPrimaryNoParenthesis
	::= Literal:rhs
		{: RESULT = rhs; :}
	|   Number:rhs
		{: RESULT = rhs; :}
	|   FieldAccess:fa
		{: RESULT = fa; :}
	|   MethodCall:mc
		{: RESULT = mc; :}
	;

FieldAccess
	::= NotJustName:njn PERIOD Identifier:i
		{: RESULT = makeNode("FIELD ACCESS").adoptChildren(njn.makeSibling(i)); :}
	;


MethodCall
	::= MethodReference:mr LPAREN ArgumentList:al RPAREN
		{: RESULT = makeNode("METHOD CALL").adoptChildren(mr.makeSibling(makeNode("PARAMS").adoptChildren(al))); :}
	|   MethodReference:mr LPAREN RPAREN
		{: RESULT = makeNode("METHOD CALL").adoptChildren(mr.makeSibling(makeNode("EMPTY PARAMS"))); :}
	;

MethodReference
	::= ComplexPrimaryNoParenthesis:cpnp
		{: RESULT = cpnp; :}
	|   QualifiedName:qn
		{: RESULT = qn; :}
	|   SpecialName:sn
		{: RESULT = sn; :}
	;

SpecialName
	::= THIS
		{: RESULT = makeNode("THIS"); :}
	|   NULL
		{: RESULT = makeNode("NULL"); :}
	|   SUPER
		{: RESULT = makeNode("SUPER"); :}
	;

ArgumentList
	::= Expression:e
	{:  RESULT = e;  :}
	|   ArgumentList:al COMMA Expression:e
	{:  al.makeSibling(e);
		RESULT = al;
	:}
	;

/*
 * Extra credit:  anonymous subclasses
 */
AllocationExpression
	::= NEW TypeName:t LPAREN ArgumentList:a RPAREN
	{:
		AbstractNode paramsNode = makeNode("PARAMS");
		paramsNode.adoptChildren(a);
	 	RESULT = makeNode("NEW " + t.getName() + " INSTANCE").adoptChildren(paramsNode); :}
	|   NEW TypeName:t LPAREN RPAREN
		{: RESULT = makeNode("NEW " + t.getName() + " INSTANCE"); :}
	;

/*
 * Extra credit, add post increment and decrement
 */
PostfixExpression
	::= PrimaryExpression:rhs
		{: RESULT = rhs; :}
    ;

Expression
	::= AssignmentExpression:rhs
	{: RESULT = rhs; :}
    ;

/*
 * Here we go.  Following are a bunch of rules to handle the right priority and
 * associativity of operators.  These rules can be treated fairly uniformly
 * for now
 * However, be aware that down the road, you will want subclassees that
 * can distinguish
 * the nodes by type, so that you can generate different code for
 * plus vs. minus, for example.
 */

/*
 * What kind of associativity do we get for assignment expressions - why?
 */

AssignmentExpression
	::= ConditionalExpression:rhs
		{: RESULT = rhs; :}
	|   UnaryExpression:lhs AssignmentOperator:op AssignmentExpression:rhs
		{: RESULT = makeNode("ASSIGN").adoptChildren(lhs.makeSibling(rhs)); :}
	;

AssignmentOperator
	::= EQUALS:tok
	|   ASS_ADD:tok   /* There are more of these if you're interested */
	;

ConditionalExpression
	::= ConditionalOrExpression:ce
		{: RESULT = ce; :}
	|   ConditionalOrExpression:coe QUESTION Expression:e COLON ConditionalExpression:ce
		{: RESULT = makeNode("CONDITIONAL EXPRESSION").adoptChildren(coe).adoptChildren(e).adoptChildren(ce); :}
	;


ConditionalOrExpression
	::= ConditionalAndExpression:rhs
		{: RESULT = rhs; :}
	|   ConditionalOrExpression:left OP_LOR:op ConditionalAndExpression:right   /* short-circuit OR */
        {: RESULT = makeNode("|| OR").adoptChildren(left.makeSibling(right)); :}
	;

ConditionalAndExpression
	::= InclusiveOrExpression:rhs
		{: RESULT = rhs; :}
	|   ConditionalAndExpression:left OP_LAND:op InclusiveOrExpression:right   /* short-circuit AND */
        {: RESULT = makeNode("&& AND").adoptChildren(left.makeSibling(right)); :}
	;

InclusiveOrExpression
	::= ExclusiveOrExpression:rhs
		{: RESULT = rhs; :}
	|   InclusiveOrExpression:left PIPE:op ExclusiveOrExpression:right
        {: RESULT = makeNode("| OR").adoptChildren(left.makeSibling(right)); :}
	;

ExclusiveOrExpression
	::= AndExpression:rhs
		{: RESULT = rhs; :}
	|   ExclusiveOrExpression:left HAT:op AndExpression:right
		{: RESULT = makeNode("XOR").adoptChildren(left.makeSibling(right)); :}
	;

AndExpression
	::= EqualityExpression:rhs
		{: RESULT = rhs; :}
        |   AndExpression:left AND:op EqualityExpression:right
        {: RESULT = makeNode("& AND").adoptChildren(left.makeSibling(right)); :}
        ;

EqualityExpression
	::= RelationalExpression:rhs
		{: RESULT = rhs; :}
        |   EqualityExpression:left OP_EQ:op RelationalExpression:right
		{: RESULT = makeNode("IS EQUAL").adoptChildren(left.makeSibling(right)); :}
        |   EqualityExpression:left OP_NE:op RelationalExpression:right
		{: RESULT = makeNode("IS NOT EQUAL").adoptChildren(left.makeSibling(right)); :}
        ;

RelationalExpression
	::= ShiftExpression:rhs
		{: RESULT = rhs; :}
    |   RelationalExpression:left OP_GT:op    ShiftExpression:right
		{: RESULT = makeNode("GREATER THAN").adoptChildren(left.makeSibling(right)); :}
	|   RelationalExpression:left OP_LT:op    ShiftExpression:right
		{: RESULT = makeNode("LESS THAN").adoptChildren(left.makeSibling(right)); :}
	|   RelationalExpression:left OP_LE:op      ShiftExpression:right
		{: RESULT = makeNode("LESS THAN OR EQUAL").adoptChildren(left.makeSibling(right)); :}
	|   RelationalExpression:left OP_GE:op      ShiftExpression:right
		{: RESULT = makeNode("GREATER THAN OR EQUAL").adoptChildren(left.makeSibling(right)); :}
	|   RelationalExpression:left INSTANCEOF:op TypeSpecifier:right
		{: RESULT = makeNode("INSTANCEOF").adoptChildren(left.makeSibling(right)); :}
	;
/*
 * Extra credit:  shift expressions
 */
ShiftExpression
	::= AdditiveExpression:rhs
		{: RESULT = rhs; :}
	;

AdditiveExpression
	::= MultiplicativeExpression:rhs
		{: RESULT = rhs; :}
    |   AdditiveExpression:lhs PLUSOP:op MultiplicativeExpression:rhs
    	{: RESULT = makeNode("PLUS").adoptChildren(lhs.makeSibling(rhs)); :}
	|   AdditiveExpression:lhs MINUSOP:op MultiplicativeExpression:rhs
     	{: RESULT = makeNode("MINUS").adoptChildren(lhs.makeSibling(rhs)); :}
    ;

MultiplicativeExpression
	::= CastExpression:rhs
		{: RESULT = rhs; :}
	|   MultiplicativeExpression:lhs ASTERICK:op CastExpression:rhs
		{: RESULT = makeNode("MULT").adoptChildren(lhs.makeSibling(rhs)); :}
	|   MultiplicativeExpression:lhs RSLASH:op CastExpression:rhs
		{: RESULT = makeNode("DIVIDE").adoptChildren(lhs.makeSibling(rhs)); :}
	|   MultiplicativeExpression:lhs PERCENT:op CastExpression:rhs	/* remainder */
		{: RESULT = makeNode("MODULO").adoptChildren(lhs.makeSibling(rhs)); :}
	;
/*
 * Be sure to introduce an explicit cast operator
 */
CastExpression
	::= UnaryExpression:rhs
		{: RESULT = rhs; :}					/* no cast */
    |   LPAREN PrimitiveType:s RPAREN CastExpression:lue		/* More casts coming */
    	{: RESULT = makeNode("CAST").adoptChildren(s).adoptChildren(lue); :}
	|   LPAREN Expression:exp RPAREN LogicalUnaryExpression:lue	/* Final cast */
		{: RESULT = makeNode("FINAL CAST").adoptChildren(exp).adoptChildren(lue); :}
	;

/*
 * Extra credit:  pre-increment and pre-decrement
 */
UnaryExpression
	::= LogicalUnaryExpression:rhs
		{: RESULT = rhs; :}
	|   ArithmeticUnaryOperator:op CastExpression:exp
		{: RESULT = op.adoptChildren(exp); :}
	;

ArithmeticUnaryOperator
	::= PLUSOP:rhs
		{: RESULT = makeNode("POS"); :}
	|   MINUSOP:rhs
		{: RESULT = makeNode("NEG"); :}
	;

LogicalUnaryExpression
	::= PostfixExpression:rhs
		{: RESULT = rhs; :}
	|   LogicalUnaryOperator:op UnaryExpression:uexp
		{: RESULT = op.adoptChildren(uexp); :}
	;

LogicalUnaryOperator
	::= BANG:rhs
		{: RESULT = makeNode("BANG!"); :}
	|  	TILDE:rhs
		{: RESULT = makeNode("TILDE"); :}
	;

Identifier
	::= IDENTIFIER:id
	{: RESULT = makeNode(id); :}
	;

Literal
	::= LITERAL:lit
		{: RESULT = makeNode(lit); :}
	;

Number
	::= INTNUMBER:n
	{: RESULT = makeNode(n); :}
	;