package instrument;
import cse131.ArgsProcessor;
import sedgewick.*;
/*************************************************************************
 *  Compilation:  javac PlayThatTune.java
 *  Execution:    java PlayThatTune < input.txt
 *  Dependencies: StdAudio.java StdAudio.java
 *
 *  This is a data-driven program that plays pure tones from
 *  the notes on the chromatic scale, specified on standard input
 *  by their distance from concert A.
 *
 *  % java PlayThatTune < elise.txt
 *
 *
 *  Data files
 *  ----------
 *  http://www.cs.princeton.edu/introcs/21function/elise.txt
 *  http://www.cs.princeton.edu/introcs/21function/99luftballons.txt
 *  http://www.cs.princeton.edu/introcs/21function/freebird.txt
 *  http://www.cs.princeton.edu/introcs/21function/Ascale.txt
 *  http://www.cs.princeton.edu/introcs/21function/National_Anthem.txt
 *  http://www.cs.princeton.edu/introcs/21function/looney.txt
 *  http://www.cs.princeton.edu/introcs/21function/StairwayToHeaven.txt
 *  http://www.cs.princeton.edu/introcs/21function/entertainer.txt
 *  http://www.cs.princeton.edu/introcs/21function/old-nassau.txt
 *  http://www.cs.princeton.edu/introcs/21function/arabesque.txt
 *  http://www.cs.princeton.edu/introcs/21function/firstcut.txt 
 *  http://www.cs.princeton.edu/introcs/21function/tomsdiner.txt
 *
 *************************************************************************/

public class PlayThatTune {

    public static void main(String[] args) {
    	    	
    	ArgsProcessor.useStdInput("music");

    	ArgsProcessor ap = new ArgsProcessor(args);
    	int n = ap.nextInt("How many frequency factors?");
    	
    	int[] numerators = new int[n];
    	int[] denominators = new int[n];
    	double[] relStrength = new double[n];
    	
    	for(int i = 0; i < n; i++){
    		int num = ap.nextInt("Numerator of frequency factor " + (i + 1) + "?");
    		numerators[i] = num;
    		int den = ap.nextInt("Denominator of frequency factor " + (i + 1) + "?");
    		denominators[i] = den;
    		double strength = ap.nextDouble("Relative strength of frequency factor " + (i + 1) + "?");
    		relStrength[i] = strength;
    	}

        // repeat as long as there are more integers to read in
        while (!StdIn.isEmpty()) {

            // read in the pitch, where 0 = Concert A (A4)
            int pitch = StdIn.readInt();

            // read in duration in seconds
            double duration = StdIn.readDouble();

            // build sine wave with desired frequency
            double hz = 440 * Math.pow(2, pitch / 12.0);
            int N = (int) (StdAudio.SAMPLE_RATE * duration);
            double[] a = new double[N+1];
            for (int i = 0; i <= N; i++) {
            	a[i] = 0;
            	for(int j = 0; j < n; j++){
            		a[i] = a[i] + relStrength[j]*Math.sin(2 * Math.PI * i * ((double)numerators[j]/denominators[j]) * hz / StdAudio.SAMPLE_RATE);
            	}
            }

            // play it using standard audio
            StdAudio.play(a);
        }
    }
}
