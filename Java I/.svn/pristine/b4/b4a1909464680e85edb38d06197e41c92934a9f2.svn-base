package watermelons;

import java.util.Arrays;

public class Watermelons {
	
	/**
	 * Computes the sum of each distinct pair of entries in the incoming array.
	 * A given pair of entries has its sum computed only once.  So if you
	 * compute the sum for entries 2 and 4, and that sum appears in your answer
	 * array, then you do not also compute the sum of entries 4 and 2.
	 * Depending on the input, the same sum value may appear multiple times in the result.
	 * For example, if all of the incoming values are 0, then so are all of the returned values.
	 * @param nums an array of integers, possibly containing duplicates
	 * @return an array containing the sums of pairs as described above
	 */
	public static int[] allPairSums(int[] nums) {
		int ansLength = 0;
		for(int i=0; i<nums.length; i++){
			ansLength = ansLength + (nums.length-i-1);
		}
		int[] ans = new int[ansLength];  
		int k=0;
		for(int i=0; i<nums.length; i++){	
			for(int j=0; j<nums.length; j++){
				if (i < j) {
					ans[k] = nums[i]+nums[j];
					k++;
					if (i == j) k--;
				}
			}
		}	
		return ans;
	}
	
	/**
	 * The method below must COMPUTE and return a solution to the puzzle posted
	 * on the page that describes this extension.  You must compute the solution by trying
	 * lots of possibilities, and finding the one that yields the right answer.
	 * You can run the unit test testPuzzleSolution to see if you are right.
	 * @return
	 */
	public static int[] getSolution() {
		int[] givenWeightSums = new int[] {20, 22, 23, 24, 25, 26, 27, 28, 30, 31};
		int[] pumpkinWeights = new int[5]; 
		int[] testWeightSums = new int[5];
		weight:
		for(int i=0; i<30; i++){
			pumpkinWeights[0] = i;
			for(int j=0; j<30; j++){
				pumpkinWeights[1] = j;
				for(int k=0; k<30; k++){
					pumpkinWeights[2] = k;
					for(int l=0; l<30; l++){
						pumpkinWeights[3] = l;
						for(int m=0; m<30; m++){
							pumpkinWeights[4] = m;
							testWeightSums = allPairSums(pumpkinWeights);
							Arrays.sort(testWeightSums);
							if(Arrays.equals(testWeightSums, givenWeightSums)){
								break weight;
							}
						}
					}
				}
			}
		}
		return pumpkinWeights;
	}

}
