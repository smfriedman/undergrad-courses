package lecture5s1;
import hawupsolved.util.Wrappers;


public class BadSpinningWait {


	//  the value of i can change beyond view
	private volatile int i;
	
	public BadSpinningWait() {
		this.i = 0;
	}

	public void w() {
		System.out.println("W has started");
		
		// hold up here until this.i == 1
		
		//
		// Java, when considering the loop
		//  sees no possibility for i ever to change
		//  so it "optimizes" the code by not looking at
		//  i ever again!  (bad for us, good for Java)
		//
		// BUT -- the act of spinning here is wasteful...
		//  we wish we could just wait
		//
		while (this.i != 1) {
			// do nothing, keep spinning and checking
		}
		System.out.println("W saw i == 1");
		
		System.out.println("W has ended");
		
	}

	public void n() {
		System.out.println("N has started");
		
		Wrappers.sleep(10000);
		this.i = 1;
		
		System.out.println("N has ended");
		
	}

	public static void main(String[] args) {
		BadSpinningWait swn = new BadSpinningWait();

		new Thread() {
			public void run() {
				swn.w();
			}
		}.start();
		
		Wrappers.sleep(1000);
		swn.n();
		System.out.println("Ended");
	}

}
