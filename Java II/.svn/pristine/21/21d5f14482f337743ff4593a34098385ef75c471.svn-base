package lecture5s2;
import hawupsolved.util.Wrappers;

/**
 * This class can run a provided Runnable, but
 *   it can be watched so that we can know
 *     1) Has the provided Runnable begun yet?
 *     2) Is the provided Runnable done executing?
 * @author roncytron
 *
 */
public class WatchedRunnable implements Runnable {

	final private Runnable runnable;
	private boolean begun, done;

	public WatchedRunnable(Runnable r) {
		this.runnable = r;
		this.begun = false;
		this.done = false;
	}

	// don't hold the lock for the whole method
	//   or other lock-wanters will be starved
	// so just hold it when you need it
	public /* synchronized */ void run() {
		Wrappers.sleep(2000);
		this.begun = true;
		// (A)  we must notifyall 
		//Wrappers.notifyAll(this);
		synchronized(this) {
			this.notifyAll();
		}
		System.out.println("   The run has begun");

		runnable.run();

		Wrappers.sleep(2000);
		this.done = true;
		//Wrappers.notifyAll(this); // (B)
		synchronized(this) {
			this.notifyAll();
		}
		System.out.println("   The run has ended");
	}

	/**
	 * When properly implemented, this method will not return
	 * until it can return "true"
	 * @return whether the run() method has begun
	 */
	public synchronized boolean waitUntilBegun() {
		// I must wait until this.begun is true
		// this is 1/2 of what must be done, see (A)
		while (!this.begun) {
			// Wrappers.wait(this);
			try {
				this.wait();
			} catch (InterruptedException e) {
				// FIXME Auto-generated catch block
				e.printStackTrace();
			}
		}
		return this.begun;
	}

	/**
	 * When properly implemented, this method will not return
	 * until it can return "true"
	 * @return whether the run() method is done
	 */

	public synchronized boolean waitUntilDone() {
		// following is 1/2 of what we do, see (B)
		while (!this.done) {
			// Wrappers.wait(this);
			try {
				this.wait();
			} catch (InterruptedException e) {
				// FIXME Auto-generated catch block
				e.printStackTrace();
			}
		}
		return this.done;
	}


}
