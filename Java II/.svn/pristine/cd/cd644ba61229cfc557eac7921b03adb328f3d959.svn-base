package lecture5s1;
import hawupsolved.util.Wrappers;

/**
 * This class can run a provided Runnable, but
 *   it can be watched so that we can know
 *     1) Has the provided Runnable begun yet?
 *     2) Is the provided Runnable done executing?
 * @author roncytron
 *
 */
public class WatchedRunnable implements Runnable {
	
	final private Runnable runnable;
	private boolean begun, done;

	public WatchedRunnable(Runnable r) {
		this.runnable = r;
		this.begun = false;
		this.done = false;
	}
	
	public void run() {
		Wrappers.sleep(2000);
		this.begun = true;
		Wrappers.notifyAll(this);
		System.out.println("   The run has begun");
		
		runnable.run();
		
		Wrappers.sleep(2000);
		this.done = true;
		Wrappers.notifyAll(this);
		System.out.println("   The run has ended");
	}
	
	/**
	 * When properly implemented, this method will not return
	 * until it can return "true"
	 * @return whether the run() method has begun
	 */
	public boolean waitUntilBegun() {
		while (!this.begun) {
			// this.wait();
			Wrappers.wait(this);
		}
		return this.begun;
	}
	
	/**
	 * When properly implemented, this method will not return
	 * until it can return "true"
	 * @return whether the run() method is done
	 */
	
	public boolean waitUntilDone() {
		while (!this.done) {
			Wrappers.wait(this);
		}
		return this.done;
	}
	

}
