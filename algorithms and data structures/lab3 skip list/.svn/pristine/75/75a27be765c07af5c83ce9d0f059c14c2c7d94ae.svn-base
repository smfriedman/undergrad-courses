//
// EVENTLIST.JAVA
// Skeleton code for your EventList collection type.
//
import java.util.*;

class EventList {
    
    Random randseq;
    Pillar head;
    Pillar tail;
    int t;		//necessary for extension 1 (extensible head and tail pointers)
    
    ////////////////////////////////////////////////////////////////////
    // Here's a suitable geometric random number generator for choosing
    // pillar heights.  We use Java's ability to generate random booleans
    // to simulate coin flips.
    ////////////////////////////////////////////////////////////////////
    
    int randomHeight()
    {
	int v = 1;
	while (randseq.nextBoolean()) { v++; }
	return v;
    }

    
    //
    // Constructor
    //
    public EventList()
    {
	randseq = new Random(9989); // You may seed the PRNG however you like.
	
	head = new Pillar(new Event(-100000, "head"), 1);
	tail = new Pillar(new Event(100000, "tail"), 1);
	for(int i = 0; i < head.height; i++){
		head.tower[i].next = tail.tower[i];
		tail.tower[i].prev = head.tower[i];
		head.tower[i].pillar = head;
		tail.tower[i].pillar = tail;
	}
    }

    
    //
    // Add an Event to the list.
    //
    public void insert(Event e)
    {
    t = randomHeight();
    if (t >= head.height) doubleEnds();
    Pillar p = new Pillar(e, t);
    int l = head.height - 1;
    Pillar x = head;
    while(l >= 0){
    	Node y = x.tower[l].next;
    	if(y.pillar.event.year < e.year){//x.event.year){
    		x = y.pillar;
    	} else {
    		if (l < t){
	    		Node z = new Node(p, y, x.tower[l]);
	    		x.tower[l].next = z;
	    		y.prev = z;
	    		p.tower[l] = z;
    		} 
    		l--;	
    	}
    }
    }

    
    //
    // Remove all Events in the list with the specified year.
    //
    public void remove(int year)
    {
        int l = head.height - 1;
        Pillar x = head;
        while(l>=0){
//        	Node y = x.tower[l].next;
//        	if(y.pillar.event.year < year){
//        		x = y.pillar;
//        	}
        	while(x.event.year < year){
        		x = x.tower[l].pillar;
        	}
        	while(x.event.year == year){
        		x.tower[l].prev.next = x.tower[l].next;
        		x.tower[l].next.prev = x.tower[l].prev;
        		x = x.tower[l].next.pillar;
        	}
        	l--;
        }
    }
    
    //
    // Find all events with greatest year <= input year
    //
    public Event [] findMostRecent(int year)
    {
	int l = head.height;
	Pillar x = head;
	return null;
    }
    
    
    //
    // Find all Events within the specific range of years (inclusive).
    //
    public Event [] findRange(int first, int last)
    {
	return null;
    }
    
    /**
     * this method contains the code for the first
     * extension (extensible head and tail pointers)
     * to make insert cleaner
     */
    public void doubleEnds(){
    	int h = head.height;
    	while(h <= t){
    		h = h + h;
    	}
    	Pillar headTemp = new Pillar(new Event(-100000, "head"), h);
    	Pillar tailTemp = new Pillar(new Event(100000, "tail"), h);
    	for(int i=0; i < head.height; i++){
    		headTemp.tower[i].next = head.tower[i].next;
    		head.tower[i].next.prev = headTemp.tower[i];
    		tailTemp.tower[i].prev = tail.tower[i].prev;
    		tail.tower[i].prev.next = tailTemp.tower[i];
    	}
    	for(int i = head.height; i < h; i++){
    		headTemp.tower[i].next = tailTemp.tower[i];
    		tailTemp.tower[i].prev = headTemp.tower[i];
    	}
    	head = headTemp;
    	tail = tailTemp;
    }
}
